{"version":3,"file":"drawRoundedPolygon.js","sources":["../src/drawRoundedPolygon.ts"],"sourcesContent":["import type { Graphics } from '@pixi/graphics';\n\n/**\n * Draw a regular polygon with rounded corners.\n *\n * _Note: Only available with **@pixi/graphics-extras**._\n * @method PIXI.Graphics#drawRoundedPolygon\n * @param this\n * @param {number} x - X position\n * @param {number} y - Y position\n * @param {number} radius - Polygon radius\n * @param {number} sides - Minimum value is 3\n * @param {number} corner - Corner size in pixels.\n * @param {number} rotation - Starting rotation values in radians..\n * @returns {PIXI.Graphics} This Graphics object. Good for chaining method calls\n */\nexport function drawRoundedPolygon(this: Graphics,\n    x: number,\n    y: number,\n    radius: number,\n    sides: number,\n    corner: number,\n    rotation = 0): Graphics\n{\n    sides = Math.max((sides | 0), 3);\n\n    if (corner <= 0)\n    {\n        return this.drawRegularPolygon(x, y, radius, sides, rotation);\n    }\n\n    const sideLength = (radius * Math.sin(Math.PI / sides)) - 0.001;\n\n    corner = Math.min(corner, sideLength);\n\n    const startAngle = (-1 * Math.PI / 2) + rotation;\n    const delta = (Math.PI * 2) / sides;\n    const internalAngle = ((sides - 2) * Math.PI) / sides / 2;\n\n    for (let i = 0; i < sides; i++)\n    {\n        const angle = (i * delta) + startAngle;\n        const x0 = x + (radius * Math.cos(angle));\n        const y0 = y + (radius * Math.sin(angle));\n        const a1 = angle + (Math.PI) + internalAngle;\n        const a2 = angle - (Math.PI) - internalAngle;\n        const x1 = x0 + (corner * Math.cos(a1));\n        const y1 = y0 + (corner * Math.sin(a1));\n        const x3 = x0 + (corner * Math.cos(a2));\n        const y3 = y0 + (corner * Math.sin(a2));\n\n        if (i === 0)\n        {\n            this.moveTo(x1, y1);\n        }\n        else\n        {\n            this.lineTo(x1, y1);\n        }\n        this.quadraticCurveTo(x0, y0, x3, y3);\n    }\n\n    return this.closePath();\n}\n"],"names":[],"mappings":";AAgBO,SAAS,mBACZ,GACA,GACA,QACA,OACA,QACA,WAAW,GACf;AAGI,MAFA,QAAQ,KAAK,IAAK,QAAQ,GAAI,CAAC,GAE3B,UAAU;AAEV,WAAO,KAAK,mBAAmB,GAAG,GAAG,QAAQ,OAAO,QAAQ;AAGhE,QAAM,aAAc,SAAS,KAAK,IAAI,KAAK,KAAK,KAAK,IAAK;AAEjD,WAAA,KAAK,IAAI,QAAQ,UAAU;AAEpC,QAAM,aAAc,KAAK,KAAK,KAAK,IAAK,UAClC,QAAS,KAAK,KAAK,IAAK,OACxB,iBAAkB,QAAQ,KAAK,KAAK,KAAM,QAAQ;AAExD,WAAS,IAAI,GAAG,IAAI,OAAO,KAC3B;AACU,UAAA,QAAS,IAAI,QAAS,YACtB,KAAK,IAAK,SAAS,KAAK,IAAI,KAAK,GACjC,KAAK,IAAK,SAAS,KAAK,IAAI,KAAK,GACjC,KAAK,QAAS,KAAK,KAAM,eACzB,KAAK,QAAS,KAAK,KAAM,eACzB,KAAK,KAAM,SAAS,KAAK,IAAI,EAAE,GAC/B,KAAK,KAAM,SAAS,KAAK,IAAI,EAAE,GAC/B,KAAK,KAAM,SAAS,KAAK,IAAI,EAAE,GAC/B,KAAK,KAAM,SAAS,KAAK,IAAI,EAAE;AAEjC,UAAM,IAEN,KAAK,OAAO,IAAI,EAAE,IAIlB,KAAK,OAAO,IAAI,EAAE,GAEtB,KAAK,iBAAiB,IAAI,IAAI,IAAI,EAAE;AAAA,EACxC;AAEA,SAAO,KAAK;AAChB;;"}